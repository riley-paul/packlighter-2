/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppLayoutImport } from './routes/_app-layout'
import { Route as AppLayoutIndexImport } from './routes/_app-layout.index'
import { Route as AppLayoutListIdImport } from './routes/_app-layout.$listId'

// Create/Update Routes

const AppLayoutRoute = AppLayoutImport.update({
  id: '/_app-layout',
  getParentRoute: () => rootRoute,
} as any)

const AppLayoutIndexRoute = AppLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AppLayoutListIdRoute = AppLayoutListIdImport.update({
  id: '/$listId',
  path: '/$listId',
  getParentRoute: () => AppLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app-layout': {
      id: '/_app-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_app-layout/$listId': {
      id: '/_app-layout/$listId'
      path: '/$listId'
      fullPath: '/$listId'
      preLoaderRoute: typeof AppLayoutListIdImport
      parentRoute: typeof AppLayoutImport
    }
    '/_app-layout/': {
      id: '/_app-layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppLayoutIndexImport
      parentRoute: typeof AppLayoutImport
    }
  }
}

// Create and export the route tree

interface AppLayoutRouteChildren {
  AppLayoutListIdRoute: typeof AppLayoutListIdRoute
  AppLayoutIndexRoute: typeof AppLayoutIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutListIdRoute: AppLayoutListIdRoute,
  AppLayoutIndexRoute: AppLayoutIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AppLayoutRouteWithChildren
  '/$listId': typeof AppLayoutListIdRoute
  '/': typeof AppLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/$listId': typeof AppLayoutListIdRoute
  '/': typeof AppLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app-layout': typeof AppLayoutRouteWithChildren
  '/_app-layout/$listId': typeof AppLayoutListIdRoute
  '/_app-layout/': typeof AppLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/$listId' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/$listId' | '/'
  id: '__root__' | '/_app-layout' | '/_app-layout/$listId' | '/_app-layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app-layout"
      ]
    },
    "/_app-layout": {
      "filePath": "_app-layout.tsx",
      "children": [
        "/_app-layout/$listId",
        "/_app-layout/"
      ]
    },
    "/_app-layout/$listId": {
      "filePath": "_app-layout.$listId.tsx",
      "parent": "/_app-layout"
    },
    "/_app-layout/": {
      "filePath": "_app-layout.index.tsx",
      "parent": "/_app-layout"
    }
  }
}
ROUTE_MANIFEST_END */
